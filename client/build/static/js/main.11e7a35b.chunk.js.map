{"version":3,"sources":["components/Board/BoardColumn.js","components/Board/BoardItem.js","utils/jobFetch.js","utils/jobPost.js","components/Board/Board.js","components/Board/index.js","components/Form/Form.js","components/Form/index.js","pages/Dashboard.js","pages/Materials.js","pages/Landing.js","App.js","serviceWorker.js","index.js"],"names":["BoardColumn","status","changeTaskStatus","children","ref","useRef","useDrop","accept","drop","item","id","BoardItem","props","title","company","description","url","resume","coverLetter","salary","contactEmail","useState","show","setShow","handleClose","useDrag","type","collect","monitor","isDragging","opacity","drag","console","log","style","onClick","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","userID","axios","get","newJob","post","jobID","updatedJob","put","channels","labelsMap","interested","applied","responded","interviewing","offer","classes","header","background","color","fontFamily","textAlign","paddingTop","paddingBottom","board","display","backgroundColor","margin","padding","width","noPad","paddingLeft","paddingRight","column","height","fontSize","borderRadius","fontWeight","cursor","Board","tasks","setTaskStatus","getAllJobs","jobFetch","then","res","data","useEffect","newState","i","state","newApplications","length","uuid","push","jobPost","useCallback","task","find","taskIndex","indexOf","newTasks","update","$set","Row","Col","noGutters","md","Nav","defaultActiveKey","className","Link","href","googleAuthProvider","firebase","auth","GoogleAuthProvider","signInWithPopup","data-testid","signInAnonymously","signOut","DndProvider","backend","HTML5Backend","map","channel","key","filter","Add","Form","validated","setValidated","formMessage","setFormMessage","location","formState","setFormState","handleTyping","e","target","name","value","redStyle","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","oldState","setState","Group","controlId","Label","Control","onChange","placeholder","required","as","rows","Home","Materials","resumes","covers","input","linksCol","marginLeft","InputGroup","Prepend","FormControl","aria-label","aria-describedby","Landing","window","replace","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","exact","path","component","user","render","Dashboard","uid","providerId","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.11e7a35b.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\n\r\n\r\n// This should be split into a separate component\r\nconst BoardColumn = ({ status, changeTaskStatus, children }) => {\r\n  const ref = useRef(null);\r\n  const [, drop] = useDrop({\r\n    accept: \"card\", // Tells it what type of thing we can drop in\r\n    drop(item) {\r\n      changeTaskStatus(item.id, status); // Changes the status to the status of the column\r\n\r\n    }\r\n  });\r\n  drop(ref);\r\n  return <div ref={ref}> {children}</div>;\r\n};\r\n\r\nexport default BoardColumn;\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n// This should be split into a separate component\r\n// Defines each item on the board\r\nconst BoardItem = ({ id, children, title, company, description, url, resume, coverLetter, salary, contactEmail  }, props) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  //make draggable\r\n  const ref = useRef(null);\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { type: \"card\", id },\r\n    collect: monitor => ({\r\n      isDragging: monitor.isDragging()\r\n    })\r\n  });\r\n\r\n  //make transparent while dragging\r\n  const opacity = isDragging ? 0 : 1;\r\n  drag(ref);\r\nconsole.log(title)\r\n  return (\r\n    <>\r\n      <div ref={ref} style={{ opacity }} onClick={handleShow}>\r\n        {children}\r\n      </div>\r\n\r\n      {/* popup on click */}\r\n      <Modal show={show} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title} - {company}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {description}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"primary\" onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n      </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default BoardItem;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  fetchAll: function(userID) {\r\n    console.log(userID);\r\n    return axios.get(`api/jobs/${userID}`);\r\n  },\r\n  fetchByCompany: function(query) {\r\n    return axios.get(\"/api/jobs/company\", { params: { q: query } });\r\n  },\r\n  fetchByTitle: function(query) {\r\n    return axios.get(\"/api/jobs/title\", { params: { q: query } });\r\n  }\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  addJob: function(newJob) {\r\n    console.log(newJob);\r\n    return axios.post(\"api/jobs\", newJob);\r\n  },\r\n\r\n  updateJob: function(jobID, updatedJob) {\r\n    console.log(updatedJob);\r\n    return axios.put(`api/jobs/${jobID}`, updatedJob);\r\n  }\r\n};\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport uuid from \"react-uuid\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\"; // Doesn't work with touch\r\nimport update from \"immutability-helper\";\r\nimport BoardColumn from \"./BoardColumn\";\r\nimport BoardItem from \"./BoardItem\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport jobFetch from \"../../utils/jobFetch\";\r\nimport jobPost from \"../../utils/jobPost\";\r\nimport firebase from \"firebase/app\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {\r\n  FirebaseAuthProvider,\r\n  FirebaseAuthConsumer,\r\n  IfFirebaseAuthed,\r\n  IfFirebaseAuthedAnd\r\n} from \"@react-firebase/auth\";\r\nimport \"firebase/auth\";\r\n\r\n// The different columns\r\nconst channels = [\r\n  \"interested\",\r\n  \"applied\",\r\n  \"responded\",\r\n  \"interviewing\",\r\n  \"offer\"\r\n];\r\n\r\n// What we label the columns.\r\n// Key : Label\r\n// Key is what we store in state\r\n// Label is what's displayed\r\nconst labelsMap = {\r\n  interested: \"Interested\",\r\n  applied: \"Applied\",\r\n  responded: \"Responded\",\r\n  interviewing: \"Interviewing\",\r\n  offer: \"Offer\"\r\n};\r\n\r\n//set styling for each column as channel.column\r\n// colors\r\n//orange: #F69346\r\n//green: #18C6B3\r\n//yellow: #FFBF13\r\n//blue: #0D92FF\r\n//pink: #FF4A75\r\n// grey: #F5F6FA\r\nconst classes = {\r\n  header: {\r\n    background: \"linear-gradient(to bottom right, #0D92FF, #18C6B3)\",\r\n    color: \"white\",\r\n    fontFamily: \"'Nunito', sans-serif\",\r\n    textAlign: \"center\",\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\"\r\n  },\r\n  board: {\r\n    display: \"flex\",\r\n    backgroundColor: \"#F5F6FA\",\r\n    margin: \"0 20px 0 0\",\r\n    padding: \"10px\",\r\n    width: \"90vw\",\r\n    fontFamily: \"'Nunito', sans-serif\"\r\n  },\r\n  noPad: {\r\n    paddingLeft: \"0 !important\",\r\n    paddingRight: \"0 !important\"\r\n  },\r\n  column: {\r\n    // minWidth: 180,\r\n    // width: \"14vw\",\r\n    height: \"80vh\",\r\n    margin: \"0 auto\",\r\n    backgroundColor: \"#F5F6FA\"\r\n  },\r\n  // columnHead: {\r\n  //   textAlign: \"center\",\r\n  //   padding: 10,\r\n  //   fontSize: \"1.2em\",\r\n  //   color: \"white\",\r\n  //   margin: \"10px 5px 0 5px\",\r\n  //   borderRadius: \"5px\",\r\n  //   fontWeight: 600\r\n  // },\r\n  interested: {\r\n    backgroundColor: \"#F69346\",\r\n    textAlign: \"center\",\r\n    padding: 10,\r\n    fontSize: \"1.2em\",\r\n    color: \"white\",\r\n    margin: \"10px 5px 0 5px\",\r\n    borderRadius: \"5px\",\r\n    fontWeight: 600\r\n  },\r\n  applied: {\r\n    backgroundColor: \"#18C6B3\",\r\n    textAlign: \"center\",\r\n    padding: 10,\r\n    fontSize: \"1.2em\",\r\n    color: \"white\",\r\n    margin: \"10px 5px 0 5px\",\r\n    borderRadius: \"5px\",\r\n    fontWeight: 600\r\n  },\r\n  responded: {\r\n    backgroundColor: \"#FFBF13\",\r\n    textAlign: \"center\",\r\n    padding: 10,\r\n    fontSize: \"1.2em\",\r\n    color: \"white\",\r\n    margin: \"10px 5px 0 5px\",\r\n    borderRadius: \"5px\",\r\n    fontWeight: 600\r\n  },\r\n  interviewing: {\r\n    backgroundColor: \"#0D92FF\",\r\n    textAlign: \"center\",\r\n    padding: 10,\r\n    fontSize: \"1.2em\",\r\n    color: \"white\",\r\n    margin: \"10px 5px 0 5px\",\r\n    borderRadius: \"5px\",\r\n    fontWeight: 600\r\n  },\r\n  offer: {\r\n    backgroundColor: \"#FF4A75\",\r\n    textAlign: \"center\",\r\n    padding: 10,\r\n    fontSize: \"1.2em\",\r\n    color: \"white\",\r\n    margin: \"10px 5px 0 5px\",\r\n    borderRadius: \"5px\",\r\n    fontWeight: 600\r\n  },\r\n  item: {\r\n    padding: 10,\r\n    margin: 10,\r\n    fontSize: \"0.8em\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"white\",\r\n    borderRadius: \"5px\"\r\n  }\r\n};\r\nconst Board = props => {\r\n  const [tasks, setTaskStatus] = useState([]);\r\n  const getAllJobs = userID => {\r\n    jobFetch.fetchAll(userID).then(res => {\r\n      setTaskStatus(res.data);\r\n    });\r\n  };\r\n  // This code adds new applications to the board from data from forms\r\n  useEffect(() => {\r\n    console.log(props.userID);\r\n    getAllJobs(props.userID);\r\n\r\n    var newState = tasks;\r\n    for (var i = 0; i < props.state.newApplications.length; i++) {\r\n      // Adding status and id to new applications\r\n      props.state.newApplications[i].status = \"interested\";\r\n      props.state.newApplications[i].userID = props.userID;\r\n      console.log(props.userID);\r\n      props.state.newApplications[i].jobID = uuid();\r\n      console.log(props.state.newApplications[i].jobID);\r\n      // pushing new applications\r\n      newState.push(props.state.newApplications[i]);\r\n      props.state.newApplications = [];\r\n      jobPost.addJob(newState[newState.length - 1]);\r\n      getAllJobs(props.userID);\r\n    }\r\n    setTaskStatus(newState);\r\n    changeTaskStatus();\r\n  }, [props]);\r\n\r\n  //updating job in db whenever task is changed\r\n  const changeTaskStatus = useCallback(\r\n    (id, status) => {\r\n      // Match the task to the ID\r\n      let task = tasks.find(task => task.jobID === id);\r\n      const taskIndex = tasks.indexOf(task);\r\n\r\n      // Set the working task\r\n      task = { ...task, status };\r\n      jobPost.updateJob(task.jobID, task);\r\n      // Update the tasks\r\n      let newTasks = update(tasks, {\r\n        [taskIndex]: { $set: task }\r\n      });\r\n\r\n      // Update state\r\n      setTaskStatus(newTasks);\r\n    },\r\n    [tasks]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col style={classes.header}>\r\n          <h1>Applications</h1>\r\n        </Col>\r\n      </Row>\r\n      <Row noGutters={true}>\r\n        <Col md={2}>\r\n          <Nav defaultActiveKey=\"/\" className=\"flex-column\">\r\n            <Nav.Link href=\"/\">Apps</Nav.Link>\r\n            <Nav.Link href=\"/materials\">Materials</Nav.Link>\r\n          </Nav>\r\n          <div>\r\n            <Button\r\n              onClick={() => {\r\n                const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n                firebase.auth().signInWithPopup(googleAuthProvider);\r\n              }}\r\n            >\r\n              Sign In with Google\r\n            </Button>\r\n            <Button\r\n              data-testid=\"signin-anon\"\r\n              onClick={() => {\r\n                firebase.auth().signInAnonymously();\r\n              }}\r\n            >\r\n              Sign In Anonymously\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                firebase.auth().signOut();\r\n              }}\r\n            >\r\n              Sign Out\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n        <Col md={10} style={classes.noPad}>\r\n          {/* This handles the click events */}\r\n          {/* I need to figure out how to make it work with touch events */}\r\n          <DndProvider backend={HTML5Backend}>\r\n            <section style={classes.board}>\r\n              {/* Maps over the different channels and creates a column for each */}\r\n              {channels.map(channel => (\r\n                <Col key={channel} md={2}>\r\n                  <BoardColumn\r\n                    key={channel}\r\n                    status={channel}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                  >\r\n                    <div style={classes.column}>\r\n                      <div style={(classes.columnHead, classes[channel])}>\r\n                        {labelsMap[channel]}\r\n                      </div>\r\n                      <div>\r\n                        {/* Renders the correct tasks onto the column */}\r\n                        {tasks\r\n                          .filter(item => item.status === channel)\r\n                          .map(item => (\r\n                            <BoardItem\r\n                              key={item.jobID}\r\n                              id={item.jobID}\r\n                              title={item.title}\r\n                              description={item.description}\r\n                              company={item.company}\r\n                              salary={item.salary}\r\n                              url={item.href}\r\n                              resume={item.resume}\r\n                              coverLetter={item.coverLetter}\r\n                              contactEmail={item.contactEmail}\r\n                            >\r\n                              <div style={classes.item}>\r\n                                {item.title} - {item.company}\r\n                              </div>\r\n                            </BoardItem>\r\n                          ))}\r\n                      </div>\r\n                    </div>\r\n                  </BoardColumn>\r\n                </Col>\r\n              ))}\r\n            </section>\r\n          </DndProvider>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import Board from \"./Board\";\r\n\r\nexport default Board;\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\n// Function to add new application\r\nfunction Add(props) {\r\n  const [validated, setValidated] = useState(false)\r\n  const [formMessage, setFormMessage] = useState(\"\")\r\n\r\n  // console.log(\"props in form\", props) // for testing//\r\n  const [show, setShow] = useState(false);\r\n  const [formState, setFormState] = useState({\r\n    title: \"\",\r\n    company: \"\",\r\n    salary: \"\",\r\n    location: \"\",\r\n    description: \"\"\r\n  });\r\n  const handleTyping = e => {\r\n    // console.log(\"typing\", e.target.value, e.target.name) // for testing //\r\n    setFormState({ ...formState, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const redStyle = {\r\n    color: 'red',\r\n  };\r\n\r\n  // For handling the save to move over to board\r\n  const handleSave = (event) => {\r\n    const form = event.currentTarget\r\n    // console.log(\"submit\") // for testing\r\n    if (form.checkValidity() === false) {\r\n      // console.log(\"bad form\") // for testing\r\n      setFormMessage(\"Please fill out the required fields\")\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n    } else {\r\n      var oldState = props.state;\r\n      oldState.newApplications.push(formState);\r\n      props.setState({\r\n        ...props.state,\r\n        newApplications: oldState.newApplications\r\n      });\r\n      setValidated(true);\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  return (\r\n    <>\r\n      <Button variant=\"primary\" onClick={handleShow}>\r\n        Add a New Application! +\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Best of luck!</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Please fill out the information below!\r\n          <Form noValidate validated={validated} onSubmit={handleSave}>\r\n            {/* Message when required fields are not filled out  */}\r\n            {formMessage.length > 0 && (\r\n              <p style={redStyle}>{formMessage}</p>\r\n            )}\r\n\r\n            <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n              <Form.Label>Title <span style={redStyle}>*</span></Form.Label>\r\n              <Form.Control\r\n                type=\"input\"\r\n                name=\"title\"\r\n                onChange={handleTyping}\r\n                placeholder=\"\"\r\n                required=\"required\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n              <Form.Label>Company Name <span style={redStyle}>*</span></Form.Label>\r\n              <Form.Control\r\n                type=\"input\"\r\n                name=\"company\"\r\n                onChange={handleTyping}\r\n                placeholder=\"\"\r\n                required=\"required\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n              <Form.Label>Description <span style={redStyle}>*</span></Form.Label>\r\n              <Form.Control as=\"textarea\" rows=\"5\"\r\n                type=\"input\"\r\n                name=\"description\"\r\n                onChange={handleTyping}\r\n                placeholder=\"\"\r\n                required=\"required\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n              <Form.Label>Salary</Form.Label>\r\n              <Form.Control\r\n                type=\"input\"\r\n                name=\"salary\"\r\n                onChange={handleTyping}\r\n                placeholder=\"\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n              <Form.Label>Location</Form.Label>\r\n              <Form.Control\r\n                type=\"input\"\r\n                name=\"location\"\r\n                onChange={handleTyping}\r\n                placeholder=\"\"\r\n              />\r\n            </Form.Group>\r\n            <p style={redStyle}> * required</p>\r\n            {/* Button must be inside form element to trigger validation */}\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Add to The Dashboard!\r\n              </Button>\r\n              <span> </span>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n              </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Add;\r\n","import Form from \"./Form\";\r\n\r\nexport default Form;\r\n","import React, { useState } from \"react\";\r\nimport Board from \"../components/Board\";\r\nimport Form from \"../components/Form\";\r\n\r\nfunction Home(props) {\r\n  const [state, setState] = useState({ newApplications: [], tasks: [] });\r\n  const userID = props.userID;\r\n\r\n  return (\r\n    <div>\r\n      <Board state={state} userID={props.userID} />\r\n      <Form state={state} setState={setState} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\n\r\nfunction Materials() {\r\n  const [resLinks, setResLinks] = useState([]);\r\n  const [covLinks, setCovLinks] = useState([]);\r\n  const classes = {\r\n    header: {\r\n      background: \"linear-gradient(to bottom right, #0D92FF, #18C6B3)\",\r\n      color: \"white\",\r\n      fontFamily: \"'Nunito', sans-serif\",\r\n      textAlign: \"center\",\r\n      paddingTop: \"10px\",\r\n      paddingBottom: \"10px\"\r\n    },\r\n    resumes: {\r\n      width: \"100%\",\r\n      margin: \"10px 10px 10px auto\",\r\n      padding: \"10px auto 10px auto\",\r\n      borderRadius: \"5px\",\r\n      backgroundColor: \"#F69346\",\r\n      color: \"white\",\r\n      fontFamily: \"'Nunito', sans-serif\",\r\n      textAlign: \"center\",\r\n    },\r\n    covers: {\r\n      width: \"100%\",\r\n      margin: \"10px auto 10px 10px\",\r\n      padding: \"10px auto 10px auto\",\r\n      borderRadius: \"5px\",\r\n      backgroundColor: \"#FFBF13\",\r\n      color: \"white\",\r\n      fontFamily: \"'Nunito', sans-serif\",\r\n      textAlign: \"center\",\r\n    },\r\n    input: {\r\n      margin: \"10px 10px 30px 10px\"\r\n    },\r\n    linksCol: {\r\n      marginLeft: \"20px\"\r\n    }\r\n  }\r\n\r\n  const addRes = (event) => {\r\n    event.preventDefault();\r\n    //TODO add input into db associated with user id, render list\r\n    const { name, value } = event.target;\r\n    setResLinks({...resLinks, [name]: value});\r\n  }\r\n\r\n  const addCov = (event) => {\r\n    event.preventDefault();\r\n    //TODO add input into db associated with user id, render list\r\n    const { name, value } = event.target;\r\n    setCovLinks({...covLinks, [name]: value});\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col style={classes.header}>\r\n          <h1>Materials</h1>\r\n        </Col>\r\n      </Row>\r\n      <Row noGutters={true}>\r\n        <Col md={2}>\r\n          <Nav defaultActiveKey=\"/\" className=\"flex-column\">\r\n            <Nav.Link href=\"/\">Apps</Nav.Link>\r\n            <Nav.Link href=\"/materials\">Materials</Nav.Link>\r\n          </Nav>\r\n        </Col>\r\n        <Col md={3}>\r\n          <h2 style={classes.resumes}>Resumes</h2>\r\n          <InputGroup className=\"mb-3\">\r\n            <InputGroup.Prepend>\r\n            <Button onClick=\"addRes\">Add Link</Button>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              aria-label=\"Default\"\r\n              aria-describedby=\"inputGroup-sizing-default\"\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col md={3}>\r\n          <h2 style={classes.covers}>Cover Letters</h2>\r\n          <InputGroup className=\"mb-3\" style={classes.input}>\r\n            <InputGroup.Prepend>\r\n            <Button onClick=\"addCov\">Add Link</Button>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              aria-label=\"Default\"\r\n              aria-describedby=\"inputGroup-sizing-default\"\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col md={3} style={classes.linksCol}>\r\n          <InputGroup className=\"mb-3\" style={classes.input}>\r\n              <InputGroup.Prepend>\r\n              <Button onClick=\"addCov\">Website</Button>\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                aria-label=\"Default\"\r\n                aria-describedby=\"inputGroup-sizing-default\"\r\n              />\r\n            </InputGroup>\r\n            <InputGroup className=\"mb-3\" style={classes.input}>\r\n            <InputGroup.Prepend>\r\n            <Button onClick=\"addCov\">LinkedIn</Button>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              aria-label=\"Default\"\r\n              aria-describedby=\"inputGroup-sizing-default\"\r\n            />\r\n          </InputGroup>\r\n          <InputGroup className=\"mb-3\" style={classes.input}>\r\n            <InputGroup.Prepend>\r\n            <Button onClick=\"addCov\">Github</Button>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              aria-label=\"Default\"\r\n              aria-describedby=\"inputGroup-sizing-default\"\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default Materials;","import React from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport firebase from \"firebase/app\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {\r\n  FirebaseAuthProvider,\r\n  FirebaseAuthConsumer,\r\n  IfFirebaseAuthed,\r\n  IfFirebaseAuthedAnd\r\n} from \"@react-firebase/auth\";\r\nimport \"firebase/auth\";\r\n\r\nconst classes = {\r\n  header: {\r\n    background: \"linear-gradient(to bottom right, #0D92FF, #18C6B3)\",\r\n    color: \"white\",\r\n    fontFamily: \"'Nunito', sans-serif\",\r\n    textAlign: \"center\",\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\"\r\n  },\r\n  board: {\r\n    display: \"flex\",\r\n    backgroundColor: \"#F5F6FA\",\r\n    margin: \"0 20px 0 0\",\r\n    padding: \"10px\",\r\n    width: \"90vw\",\r\n    fontFamily: \"'Nunito', sans-serif\"\r\n  },\r\n  noPad: {\r\n    paddingLeft: \"0 !important\",\r\n    paddingRight: \"0 !important\"\r\n  },\r\n  column: {\r\n    // minWidth: 180,\r\n    // width: \"14vw\",\r\n    height: \"80vh\",\r\n    margin: \"0 auto\",\r\n    backgroundColor: \"#F5F6FA\"\r\n  }\r\n};\r\n\r\nfunction Landing() {\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col style={classes.header}>\r\n          <h1>Landing</h1>\r\n        </Col>\r\n      </Row>\r\n      <Row noGutters={true}>\r\n        <Col md={2}>\r\n          <Nav defaultActiveKey=\"/\" className=\"flex-column\">\r\n            <Nav.Link href=\"/dashboard\">Dashboard</Nav.Link>\r\n            <Nav.Link href=\"/materials\">Materials</Nav.Link>\r\n          </Nav>\r\n          <div>\r\n            <Button\r\n              onClick={() => {\r\n                const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n                firebase\r\n                  .auth()\r\n                  .signInWithPopup(googleAuthProvider)\r\n                  .then(() => {\r\n                    window.location.replace(\"http://localhost:3000/dashboard\");\r\n                  });\r\n              }}\r\n            >\r\n              Sign In with Google\r\n            </Button>\r\n            <Button\r\n              data-testid=\"signin-anon\"\r\n              onClick={() => {\r\n                firebase.auth().signInAnonymously();\r\n              }}\r\n            >\r\n              Sign In Anonymously\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                firebase.auth().signOut();\r\n              }}\r\n            >\r\n              Sign Out\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Dashboard from \"./pages/Dashboard\";\r\nimport Materials from \"./pages/Materials\";\r\nimport Landing from \"./pages/Landing\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport firebase from \"firebase/app\";\r\nimport {\r\n  FirebaseAuthProvider,\r\n  FirebaseAuthConsumer,\r\n  IfFirebaseAuthed,\r\n  IfFirebaseAuthedAnd\r\n} from \"@react-firebase/auth\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCultPP-E1RzSrFFTcWSWK5G20mSKdTfbg\",\r\n  authDomain: \"work-hq.firebaseapp.com\",\r\n  databaseURL: \"https://work-hq.firebaseio.com\",\r\n  projectId: \"work-hq\",\r\n  storageBucket: \"work-hq.appspot.com\",\r\n  messagingSenderId: \"30525482181\",\r\n  appId: \"1:30525482181:web:825dd913c1bfdd371afcac\",\r\n  measurementId: \"G-CB66800GCV\"\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      {/* Login authentication */}\r\n      <FirebaseAuthProvider {...config} firebase={firebase}>\r\n        {/* <FirebaseAuthConsumer>\r\n            {({ isSignedIn, user, providerId }) => {\r\n              return (\r\n                <pre style={{ height: 300, overflow: \"auto\" }}>\r\n                  {JSON.stringify({ isSignedIn, user, providerId }, null, 2)}\r\n                </pre>\r\n              );\r\n            }}\r\n          </FirebaseAuthConsumer> */}\r\n        <div>\r\n          <Router>\r\n            <Route exact path=\"/\" component={Landing} />\r\n            <IfFirebaseAuthed>\r\n              {user => {\r\n                return (\r\n                  <div>\r\n                    {\" \"}\r\n                    {/* <Dashboard userID={user.user.uid} /> */}\r\n                    <div>\r\n                      <Route\r\n                        exact\r\n                        path=\"/dashboard\"\r\n                        render={props => (\r\n                          <Dashboard {...props} userID={user.user.uid} />\r\n                        )}\r\n                      />\r\n                      <Route exact path=\"/materials\" component={Materials} />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }}\r\n            </IfFirebaseAuthed>\r\n          </Router>\r\n          <IfFirebaseAuthedAnd\r\n            filter={({ providerId }) => providerId !== \"anonymous\"}\r\n          >\r\n            {({ providerId }) => {\r\n              return <div>You are authenticated with {providerId}</div>;\r\n            }}\r\n          </IfFirebaseAuthedAnd>\r\n        </div>\r\n      </FirebaseAuthProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}